/**
 * @file hdf5_io.cpp
 * @author Thomas Gillis
 * @brief 
 * @version
 * @date 2019-08-20
 * 
 * @copyright Copyright Â© UCLouvain 2019
 * 
 */

#include "hdf5_io.hpp"

/**
 * @brief 
 * 
 * @param topo 
 * @param data 
 */
void hdf5_write(Topology* topo,const double* data)
{
    return 0;
}







//==========================================================================================
//==========================================================================================
//==========================================================================================


/**
 * @brief writes a xmf file, readable by a XDMF viewer
 * 
 * @param topo topology of data being exported
 * @param filename the filename for export without its extension
 */
void xmf_write(const Topology* topo, const string filename){
    FILE *xmf = 0;
 
    string scalarName = "data";
    string extFilename = filename + ".xmf";

    /*
     * Open the file and write the XML description of the mesh.
     */

    //inspired from http://visitusers.org/index.php?title=Using_XDMF_to_read_HDF5
    
    xmf = fopen( extFilename.c_str() , "w");

    fprintf(xmf, "<?xml version=\"1.0\" ?>\n");
    fprintf(xmf, "<!DOCTYPE Xdmf SYSTEM \"Xdmf.dtd\" []>\n");
    fprintf(xmf, "<Xdmf xmlns:xi=\"http://www.w3.org/2003/XInclude\" Version=\"3.0>\n");
    fprintf(xmf, "<!-- Kindly generated by poisson -->\n");

    fprintf(xmf, " <Domain>\n");
    fprintf(xmf, "   <Grid GridType=\"Uniform\">\n");

    fprintf(xmf, "     <Topology TopologyType=\"2DCoRectMesh\" Dimensions=\"%d %d\"/>\n", topo->nglob(0), topo->nglob(1));

    fprintf(xmf, "     <Geometry GeometryType=\"ORIGIN_DXDY\">\n");
    fprintf(xmf, "           <DataItem Name=\"Origin\" Dimensions=\"2\" NumberType=\"Float\" Precision=\"4\" Format=\"XML\">\n");
    fprintf(xmf, "              %10.8f %10.8f\n"                                                                       );
    fprintf(xmf, "           </DataItem>\n");
    fprintf(xmf, "           <DataItem Name=\"Spacing\" Dimensions=\"2\" NumberType=\"Float\" Precision=\"4\" Format=\"XML\">\n");
    fprintf(xmf, "              %10.8f %10.8f\n"                                                                       );
    fprintf(xmf, "           </DataItem>\n");  
    fprintf(xmf, "     </Geometry>\n");

    fprintf(xmf, "     <Attribute Name=\"%s\" AttributeType=\"Scalar\" Center=\"Cell\">\n", scalarName);
    fprintf(xmf, "       <DataItem Dimensions=\"%d %d\" NumberType=\"Float\" Precision=\"4\" Format=\"HDF\">\n", topo->nglob(0), topo->nglob(1));
    fprintf(xmf, "        %s.h5:/data\n", filename); //<-------------------------------
    fprintf(xmf, "       </DataItem>\n");
    fprintf(xmf, "     </Attribute>\n");

//For Node centered:
    // fprintf(xmf, "     <Attribute Name=\"%s\" AttributeType=\"Scalar\" Center=\"Node\">\n", scalarName);
    // fprintf(xmf, "       <DataItem Dimensions=\"%d %d\" NumberType=\"Float\" Precision=\"4\" Format=\"HDF\">\n", NY, NX);
    // fprintf(xmf, "        %s.h5:/data\n", filename); //<-------------------------------
    // fprintf(xmf, "       </DataItem>\n");
    // fprintf(xmf, "     </Attribute>\n");

//For Vector:
    // fprintf(xmf, "     <Attribute Name=\"%s\" AttributeType=\"Vector\" Center=\"Node\">\n", scalarName);
    // fprintf(xmf, "       <DataItem Dimensions=\"%d %d  3\" NumberType=\"Float\" Precision=\"4\" Format=\"HDF\">\n", NY, NX);
    // fprintf(xmf, "        xdmf2d.h5:/data\n"); //<-------------------------------
    // fprintf(xmf, "       </DataItem>\n");
    // fprintf(xmf, "     </Attribute>\n");
//Also possible: Tensor (3x3), Tensor6 or even Matrix of NxM

    fprintf(xmf, "   </Grid>\n");
    fprintf(xmf, " </Domain>\n");
    fprintf(xmf, "</Xdmf>\n");
    fclose(xmf);
}